#+TITLE: LeetCode

Write ups and solutions to problems from [[https://www.leetcode.com][LeetCode]].

* Two Sum
** First Thought
Iterate through the array. For each number, try another number in the
array to see if it adds up to the target. Run time is =O(n^2)=.
** Improved Solution
Iterate through the array. For each number, find the difference
between it and the target. Then search the array for that value. If
the number is present, then we have our two indices.

#+BEGIN_SRC java
  public class Solution {

      public int[] twoSum(int[] numbers, int target) {
          for (int i = 0; i < numbers.length; i++) {
              int diff = target - numbers[i];
              int j = Arrays.binarySearch(numbers, i + 1, numbers.length, diff);

              if (j > 0) {
                  return new int[] { i + 1, j + 1 };
              }
          }

          // If we've implemented everything correctly, we can assume
          // this will never be reached because we're guaranteed to find
          // a solution.
          return new int[] { -1, -1 };
      }
  }
#+END_SRC

For every item in the array, we need to search for the other number in
the pair, giving =O(log n)= run time.
** Optimal Solution
We could do better by creating a window and narrowing it until the two
ends are our numbers. The window will be the size of the array to
start and then narrow based.

#+BEGIN_SRC java
  public class Solution {

      public int[] twoSum(int[] numbers, int target) {
          // If the problem stated there may not be a solution, then
          // we'd need to ensure the array has at least this many
          // elements.
          int i = 0, j = numbers.length - 1;
          
          while (i < j) {
              int sum = numbers[i] + numbers[j];
              if (sum == target) {
                  return new int[] { i + 1, j + 1 };
              }

              if (sum < target) {
                  i++;
              } else {
                  j--;
              }
          }
          
          return new int[] { -1, -1 };
      }
  }
#+END_SRC
* First Unique Character in a String
** First Thought
Iterating through a string. For each character in the string, iterate
through the remaining string to see if another character exists. If
not, return it's index. On the other hand, if the character appears
later, break out of that loop and continue searching. If the entire
string is read without finding a repeating character, return -1.

This solution has an =O(n^2)= run time, and =O(1)= space complexity.
** Improved Solution
Create an ordered map to store the character count. Iterate through
the array, adding each character to the map. Then check the map to
find the first character with only one occurrence. Use that character
as a lookup in the string.

#+BEGIN_SRC java
  public class Solution {

      public int firstUniqChar(String s) {
          Map<Character, Integer> occurrences = new LinkedHashMap<>();

          for (char c : s.toCharArray()) {
              if (occurrences.containsKey(c)) {
                  int count = occurrences.get(c);
                  occurrences.put(c, ++count);
              } else {
                  occurrences.put(c, 1);
              }
          }

          Character unique = findFirstUniqueCharacter(occurrences);
          if (unique == null) {
              return -1;
          }

          return s.indexOf(unique);
      }

      private Character findFirstUniqueCharacter(Map<Character, Integer> map) {
          Set<Map.Entry<Character, Integer>> entries = map.entrySet();
          for (Map.Entry entry : entries) {
              if ((Integer) entry.getValue() == 1) {
                  return (Character) entry.getKey();
              }
          }

          return null;
      }
  }
#+END_SRC
** Optimal Solution
The above solution got a bit out of hand. There's a lot of code there
just to check for a unique character. It may be useful if we were
dealing with an large or unknown data to find if they're unique, but
we actually know something about it. 

The problem states, /"You may assume the string contain only lowercase
letters."/. We can use a primitive array to determine whether or not a
character is unique.

#+BEGIN_SRC java
  public class Solution {

      public int firstUniqChar(String s) {
          int[] frequencies = new int[26];

          for (int i = 0; i < s.length(); i++) {
              int j = getAsciiCode(s.charAt(i));
              frequencies[j]++;
          }

          for (int i = 0; i < s.length(); i++) {
              int j = getAsciiCode(s.charAt(i));
              if (frequencies[j] == 1) {
                  return i;
              }
          }

          return -1;
      }

      private int getAsciiCode(char c) {
          return c - 'a';
      }
  }

#+END_SRC
* Valid Parentheses
** First Thought
Iterate through each character in the string. If a character is an
opening parentheses, then push it onto a stack. If a closing
parentheses is found, check it against the top character in the
stack. If it is the closing parentheses, then pop it off the stack. If
it doesn't match, then the string doesn't contain valid parentheses
pairs and should return false.

#+BEGIN_SRC java
  public class Solution {

      public boolean isValid(String s) {
          Map<Character, Character> open = openParentheses();
          Map<Character, Character> close = closeParentheses();
          Stack<Character> stack = new Stack<>();

          for (char c : s.toCharArray()) {
              // If it's an opening parentheses
              if (open.containsKey(c)) {
                  stack.push(c);
              }
              // if it's a closing parentheses
              if (close.containsKey(c)) {
                  if (stack.isEmpty()) {
                      return false;
                  }

                  char top = stack.peek();
                  // Check that it matches first
                  if (close.get(c) == top) {
                      stack.pop();
                  } else {
                      return false;
                  } 
              }
          }

          // If any parentheses remain on the stack, then the string is
          // invalid.
          return stack.isEmpty();
      }

      private Map<Character, Character> openParentheses() {
          Map<Character, Character> parens = new HashMap<>();
          parens.put('{', '}');
          parens.put('[', ']');
          parens.put('(', ')');

          return parens;
      }

      private Map<Character, Character> closeParentheses() {
          Map<Character, Character> parens = new HashMap<>();
          parens.put('}', '{');
          parens.put(']', '[');
          parens.put(')', '(');

          return parens;
      }
  }
#+END_SRC
* Palindrome Linked List
** First Thought
Make a copy of the linked list in reverse order. Then iterate over the
two linked lists, if the character's don't match, then it isn't a
palindrome. If you get to the end of the linked list without any
mismatched characters, then you must have a palindrome.

#+BEGIN_SRC java
  public class Solution {

      public boolean isPalindrome(ListNode head) {
          if (head == null) {
              return true;
          }

          ListNode copy = reverseList(head);
          while (copy != null && head != null) {
              if (copy.val != head.val) {
                  return false;
              } else {
                  copy = copy.next;
                  head = head.next;
              }
          }

          return true;
      }

      private ListNode reverseList(ListNode head) {
          ListNode previous = null;
          while (head != null) {
              ListNode next = head.next;
              head.next = previous;
              previous = head;
              head = next;
          }
      }
  }
#+END_SRC
** Improved Solution
The problem asks us to solve it in =O(n)= time and =O(1)= space. We
can accomplish this by running two pointers, one that advances two
spaces and one that advances one. When the fast pointer reaches the
end, the slow will be in the middle. From here we need to reverse the
remainder of the list, just like we did in the previous solution.

Props to yavinci on LeetCode for explaining this. I had another idea
in my head that had several pointers and was much more complex than
this.

#+BEGIN_SRC java
  public class Solution {

      public boolean isPalindrome(ListNode head) {
          ListNode slow = head, fast = head;
          while (fast != null && fast.next != null) {
              fast = fast.next.next;
              slow = slow.next;
          }

          // For odd-length lists, the center node doesn't matter. Take
          // the palindrome "mom" as an example, the "o" doesn't match
          // another "o", but it doesn't need to.
          if (fast != null) {
              slow = slow.next;
          }

          slow = reverseList(slow);
          fast = head;

          while (slow != null) {
              if (fast.val != slow.val) {
                  return false;
              }

              fast = fast.next;
              slow = slow.next;
          }

          return true;
      }

      private ListNode reverseList(ListNode head) {
          ListNode previous = null;
          while (head != null) {
              ListNode next = head.next;
              head.next = previous;
              previous = head;
              head = next;
          }

          return previous;
      }
  }
#+END_SRC
* Min Stack
** First Thought
Use an additional stack to track the minimum values. When a new item
is pushed onto the stack, check if it's less than or equal to the
minimum value at the top of the minimum stack and push if it is less
than. Use a similar method on pop, check if it's the value at the top
of the minimum stack, if so, pop it off.

#+BEGIN_SRC java
  import java.util.EmptyStackException;

  public class MinStack {

      private Stack<Integer> minimum, primary;

      public MinStack() {
          minimum = new Stack<>();
          primary = new Stack<>();
      }

      public void push(int x) {
          if (minimum.isEmpty()) {
              minimum.push(x);
          } else {
              int min = minimum.peek();

              if (x <= min) {
                  minimum.push(x);
              }
          }

          primary.push(x);
      }

      public void pop() {
          if (minimum.isEmpty() || primary.isEmpty()) {
              throw new EmptyStackException();
          }

          int x = primary.pop();
          if (x == minimum.peek()) {
              minimum.pop();
          }
      }

      public int top() {
          return primary.peek();
      }

      public int getMin() {
          return minimum.peek();
      }
  }
#+END_SRC
* Intersection of Two Linked Lists
** First Thoughts
With one node selected, iterate through the other, checking to see if
the two nodes are the same. If not, increment the cursor and
recheck. Leads to an =O(ab)= run time.
** Improved Solution
Coming up with a better solution took me quite a bit of time and had
to find help. I started down the road of counting the list's length,
but stumbled on how I could use that information for a better
solution. User zkfairytale posted a concise solution on LeetCode, that
moves the pointers to the same "starting line" so you can iterate
through the lists to find the intersecting node.

#+BEGIN_SRC java
  public class Solution {

      public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
          int aLength = count(headA);
          int bLength = count(headB);

          while (aLength > bLength) {
              headA = headA.next;
              aLength--;
          }
          while (bLength > aLength) {
              headB = headB.next;
              bLength--;
          }

          while (headA != null && headB != null) {
              if (headA == headB) {
                  return headA;
              }

              headA = headA.next;
              headB = headB.next;
          }

          return null;
      }


      private int count(ListNode head) {
          int counter = 0;
          while (head != null) {
              counter++;
              head = head.next;
          }

          return counter;
      }
  }
#+END_SRC
